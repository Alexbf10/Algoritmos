
#ifndef _MAIN
#define _MAIN

#include <iostream>
#include "biblioteca/funciones/strings.hpp"
#include "biblioteca/funciones/tokens.hpp"
#include "biblioteca/funciones/files.hpp"
#include "biblioteca/tads/parte2/Array.hpp"
#include "biblioteca/tads/parte2/Map.hpp"
#include "biblioteca/tads/parte2/List.hpp"
#include "biblioteca/tads/parte2/Stack.hpp"
#include "biblioteca/tads/parte2/Queue.hpp"
#include "biblioteca/tads/parte1/Coll.hpp"
#include "biblioteca/tads/parte1/MultidimColl.hpp"
#include "principal.hpp"
using namespace std;

struct Gasto
{
   int idCons;
   int fecha;
   double importe;
   char categoria[20];
};

struct Consorcio
{
   int idCons;
   char direccion[50];
   int cantPisos;
   int dtosPorPiso;
};

Map<int, Consorcio> consorcios = map<int, Consorcio>();

void leerConsorcios ()
{
   FILE* file = fopen ("CONSORCIOS.dat", "r+b");

   int totalRegistros = fileSize <Consorcio> (file);
   Consorcio consorcio = read<Consorcio> (file);

   for (int i = 0; i < totalRegistros; i++ )
   {
      consorcio = read <Consorcio> (file);
      mapPut <int, Consorcio> (consorcios, consorcio.idCons, consorcio);
   }
   fclose (file);
}

void leerGastos ()
{
   FILE* file = fopen ("GASTOS.dat", "r+b");

   Map<int, Map<string, double>> gastosPorConsorcio = map<int, Map <string, double>> ();

   int totalRegistros = fileSize <Gasto> (file);
   for (int i = 0; i < totalRegistros; i++)
   {
      Gasto gasto = read<Gasto> (file);

      if (!mapContains<int, Map<string, double>> (gastosPorConsorcio, gasto.idCons))
      {
       Map<string, double> gastosPorCategoria = map<string, double> ();
       mapPut<int, Map<string, double>> (gastosPorConsorcio, gasto.idCons, gastosPorCategoria);
      }

      Map<string, double>& gastosPorCategoria = *mapGet <int, Map<string, double>> (gastosPorConsorcio, gasto.idCons);
      double* importe = mapGet<string, double> (gastosPorCategoria, gasto.categoria);

      if (importe == 0)
      {
         mapPut <string, double> (gastosPorCategoria,gasto.categoria,gasto.importe);
      }
      else
      {
         *importe += gasto.importe;
      }
   }

   fclose (file);
}


double mtsPorcentuales(int idCons,int depto)
{
   double ret = 0;

   if (mapContains<int,Consorcio>(consorcios,idCons))
   {
      Consorcio* consorcio = mapGet <int, Consorcio> (consorcios, idCons);
      int totalDeptosPorPiso = consorcio->dtosPorPiso;
      ret = 1.0 / totalDeptosPorPiso;
   }

   return ret;
}

int cmpVV(double a, double b)
{
   int resultado;

   if (a>b)
   {
      resultado = 1;
   }
   else if (a<b)
   {
      resultado = -1;
   }
   else if (a==b)
   {
      resultado = 0;
   }
   return resultado;

}
void mostrarInforme (Map<int, Map<string, double>>& gastosPorConsorcio)
{
   mapReset <int, Consorcio> (consorcios);
   while (mapHasNext<int, Consorcio> (consorcios))
   {
      int idCons = mapNextKey <int, Consorcio> (consorcios);
      Consorcio consorcio = *mapGet <int, Consorcio> (consorcios, idCons);
      double totalGastos = 0;

      Map <string, double>& gastos = *mapGet <int, Map<string, double>> (gastosPorConsorcio, idCons);
      mapReset <string, double> (gastos);
      while (mapHasNext<string, double> (gastos))
      {
         string categoria = mapNextKey <string, double> (gastos);
         totalGastos += *mapGet <string, double> (gastos, categoria);
      }

      cout << "Consorcio calle: " << consorcio.direccion << " Gastos totales: $" << totalGastos;

      Map <int, double> departamentos;

      for (int piso = 1; piso <= consorcio.cantPisos; piso++)
      {
         for (int depto = 1; depto <= consorcio.dtosPorPiso; depto++)
         {
            int numeroDepto = (piso - 1) * consorcio.dtosPorPiso + depto;
            double metrosPorc = mtsPorcentuales (idCons, numeroDepto);
            mapPut <int, double> (departamentos, numeroDepto, metrosPorc);
         }
      }

      mapSortByValues <int, double> (departamentos, cmpVV);

      mapReset <int, double> (departamentos);
      while (mapHasNext<int, double> (departamentos))
      {
         int depto = mapNextKey<int, double> (departamentos);
         double mts2 = *mapGet <int, double> (departamentos, depto);
         double totalApagar = mts2 * totalGastos;

         cout << "Depto. " << depto << " " << mts2 * 100 << "% $" << totalApagar << endl;
      }
      cout << endl;
   }
}

int main()
{
   Map <int, Map<string, double>> gastosPorConsorcio = map <int, Map<string, double>> ();

   leerConsorcios();
   leerGastos();

   mostrarInforme (gastosPorConsorcio);

   return 0;
}

#endif
